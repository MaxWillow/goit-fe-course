{"version":3,"sources":["webpack:///./js/getGeoPosition.js","webpack:///./js/fetchWeather.js","webpack:///./index.js","webpack:///./js/PNotify.js"],"names":["options","fetchWeather","coordinates","refs","weatherStatus","document","querySelector","weatherIcon","location","temperature","humidity","wind","conditions","BASE_URL","ACCESS_KEY","fetch","latitude","longitude","then","res","json","data","renderWeather","innerHTML","name","current","wind_speed","weather_descriptions","src","weather_icons","alt","classList","remove","timeout","maximumAge","Promise","resolve","reject","navigator","geolocation","getCurrentPosition","coords","catch","error","PNotify","defaults","styling","icons","alert","inputCity","input","button","addEventListener","value","event","preventDefault"],"mappings":"+LACQA,YCDO,SAASC,EAAaC,GACnC,IAAMC,EAAO,CACXC,cAAeC,SAASC,cAAc,YACtCC,YAAaF,SAASC,cAAc,SACpCE,SAAUH,SAASC,cAAc,+BACjCG,YAAaJ,SAASC,cAAc,2BACpCI,SAAUL,SAASC,cAAc,+BACjCK,KAAMN,SAASC,cAAc,2BAC7BM,WAAYP,SAASC,cAAc,kCAG/BO,EAAW,sCACXC,EAAa,mCAEnB,GAA2B,iBAAhBZ,EACT,OAAOa,MACFF,EADO,eACgBC,EADhB,UACoCZ,EAAYc,SADhD,IAC4Dd,EAAYe,WAEjFC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIC,EAAcD,KAGhC,GAA2B,iBAAhBnB,EACT,OAAOa,MAASF,EAAJ,eAA2BC,EAA3B,UAA+CZ,GACxDgB,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAAAG,GAAI,OAAIC,EAAcD,KAGhC,SAASC,EAAcD,GACrBlB,EAAKK,SAASe,UAAYF,EAAKb,SAASgB,KACxCrB,EAAKM,YAAYc,UAAYF,EAAKI,QAAQhB,YAAc,SACxDN,EAAKO,SAASa,UAAYF,EAAKI,QAAQf,SAAW,IAClDP,EAAKQ,KAAKY,UAAYF,EAAKI,QAAQC,WAAa,OAChDvB,EAAKS,WAAWW,UAAYF,EAAKI,QAAQE,qBACzCxB,EAAKI,YAAYqB,IAAMP,EAAKI,QAAQI,cACpC1B,EAAKI,YAAYuB,IAAMT,EAAKI,QAAQE,qBACpCxB,EAAKC,cAAc2B,UAAUC,OAAO,eDnChChC,EAAU,CACdiC,QAAS,IACTC,WAAY,MAGP,IAAIC,QAAQ,SAACC,EAASC,GAC3BC,UAAUC,YAAYC,mBAAmBJ,EAASC,EAAQrC,MEA3DkB,KAAK,SAAAV,GACJ,MAAO,CACLQ,SAAUR,EAASiC,OAAOzB,SAC1BC,UAAWT,EAASiC,OAAOxB,aAG9BC,KAAK,SAAAuB,GACJxC,EAAawC,KAEdC,MAAM,SAAAC,GCXPC,IAAQC,SAASC,QAAU,WAC3BF,IAAQC,SAASE,MAAQ,WACzBH,IAAQI,MACN,uEDYJ,IAKIC,EALE9C,EAAO,CACX+C,MAAO7C,SAASC,cAAc,sBAC9B6C,OAAQ9C,SAASC,cAAc,0BAKjCH,EAAK+C,MAAME,iBAAiB,QAG5B,WACEH,EAAY9C,EAAK+C,MAAMG,QAHzBlD,EAAKgD,OAAOC,iBAAiB,QAM7B,SAAqBE,GACnBA,EAAMC,iBACNtD,EAAagD,GACb9C,EAAK+C,MAAMG,MAAQ","file":"main.8244871cf46c2fe2624a.js","sourcesContent":["export default function getGeoPosition() {\r\n  const options = {\r\n    timeout: 5000,\r\n    maximumAge: 1800000, //30 mins\r\n  };\r\n\r\n  return new Promise((resolve, reject) => {\r\n    navigator.geolocation.getCurrentPosition(resolve, reject, options);\r\n  });\r\n}\r\n","export default function fetchWeather(coordinates) {\r\n  const refs = {\r\n    weatherStatus: document.querySelector('#weather'),\r\n    weatherIcon: document.querySelector('.icon'),\r\n    location: document.querySelector('span[data-field=\"location\"]'),\r\n    temperature: document.querySelector('span[data-field=\"temp\"]'),\r\n    humidity: document.querySelector('span[data-field=\"humidity\"]'),\r\n    wind: document.querySelector('span[data-field=\"wind\"]'),\r\n    conditions: document.querySelector('span[data-field=\"conditions\"]'),\r\n  };\r\n\r\n  const BASE_URL = 'http://api.weatherstack.com/current';\r\n  const ACCESS_KEY = '76f52b79ada08087aad4412affff8aa1';\r\n\r\n  if (typeof coordinates === 'object') {\r\n    return fetch(\r\n      `${BASE_URL}?access_key=${ACCESS_KEY}&query=${coordinates.latitude},${coordinates.longitude}`,\r\n    )\r\n      .then(res => res.json())\r\n      .then(data => renderWeather(data));\r\n  }\r\n\r\n  if (typeof coordinates === 'string') {\r\n    return fetch(`${BASE_URL}?access_key=${ACCESS_KEY}&query=${coordinates}`)\r\n      .then(res => res.json())\r\n      .then(data => renderWeather(data));\r\n  }\r\n\r\n  function renderWeather(data) {\r\n    refs.location.innerHTML = data.location.name;\r\n    refs.temperature.innerHTML = data.current.temperature + '&#8451';\r\n    refs.humidity.innerHTML = data.current.humidity + '%';\r\n    refs.wind.innerHTML = data.current.wind_speed + ' kph';\r\n    refs.conditions.innerHTML = data.current.weather_descriptions;\r\n    refs.weatherIcon.src = data.current.weather_icons;\r\n    refs.weatherIcon.alt = data.current.weather_descriptions;\r\n    refs.weatherStatus.classList.remove('is-hidden');\r\n  }\r\n}\r\n","import './styles.css';\n\nimport setPNotifySettings from './js/PNotify';\nimport getGeoPosition from './js/getGeoPosition';\nimport fetchWeather from './js/fetchWeather';\n\ngetGeoPosition()\n  .then(location => {\n    return {\n      latitude: location.coords.latitude,\n      longitude: location.coords.longitude,\n    };\n  })\n  .then(coords => {\n    fetchWeather(coords);\n  })\n  .catch(error => {\n    setPNotifySettings();\n  });\n\nconst refs = {\n  input: document.querySelector('input[name=\"city\"]'),\n  button: document.querySelector('button[type=\"submit\"]'),\n};\n\nlet inputCity;\n\nrefs.input.addEventListener('input', handleInput);\nrefs.button.addEventListener('click', handleClick);\n\nfunction handleInput() {\n  inputCity = refs.input.value;\n}\n\nfunction handleClick(event) {\n  event.preventDefault();\n  fetchWeather(inputCity);\n  refs.input.value = '';\n}\n","import PNotify from '../../node_modules/pnotify/dist/es/PNotify.js';\r\nimport PNotifyButtons from '../../node_modules/pnotify/dist/es/PNotifyButtons.js';\r\nimport PNotifyStyleMaterial from '../../node_modules/pnotify/dist/es/PNotifyStyleMaterial.js';\r\n\r\nexport default function setPNotifySettings() {\r\n  PNotify.defaults.styling = 'material';\r\n  PNotify.defaults.icons = 'material';\r\n  PNotify.alert(\r\n    'Нет прав доступа к геопозиции, используйте поиск по имени города.',\r\n  );\r\n}\r\n"],"sourceRoot":""}